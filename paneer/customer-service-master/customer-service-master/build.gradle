buildscript {

	ext['springBootVersion'] = '1.5.4.RELEASE'
	ext['spock.version'] = '1.1-groovy-2.4'

	repositories {
		mavenCentral()
        mavenLocal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'


jar{
	baseName='customer-service'
	version = '0.0.1-SNAPSHOT'
}

group = 'com.oms.customer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	mavenLocal()
}

ext {
	springCloudServicesVersion = '1.5.0.RELEASE'
	springCloudVersion = 'Dalston.SR3'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.cloud:spring-cloud-starter-hystrix')
	compile('io.pivotal.spring.cloud:spring-cloud-services-starter-config-client')
	compile('io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.codehaus.groovy:groovy-all:2.4.5')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('com.jayway.restassured:spring-mock-mvc:2.8.0')
	testCompile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.1')
	testCompile('org.springframework:spring-test')
	testCompile('org.spockframework:spock-core')
	testCompile('org.spockframework:spock-spring')
	testCompile('com.athaydes:spock-reports:1.3.1') {
		transitive = false
	}
	compile('com.oms.common.web:oms-common-web:0.0.1-SNAPSHOT')
	compile('com.oms.common.security:oms-common-security:0.0.1-SNAPSHOT')
}

springBoot  {
	buildInfo()
}

sourceSets {
	acceptance {
		groovy.srcDir file('src/acceptance/groovy')
		resources.srcDir file('src/acceptance/resources')
		compileClasspath += sourceSets.test.compileClasspath
		runtimeClasspath += sourceSets.test.runtimeClasspath
	}
}

tasks.withType(Test) {
	testLogging {
		afterSuite { desc, result ->
			if (!desc.parent) {
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
		exceptionFormat = 'full'
	}
}

task runAcceptance(type: Test) {
	description = 'Runs the acceptance tests'
	systemProperties System.properties
	group = 'verification'
	testClassesDirs = sourceSets.acceptance.output.classesDirs
	classpath = sourceSets.acceptance.runtimeClasspath
	reports.junitXml.destination = new File(buildDir, 'groovy/acceptance-results')
	reports.html.destination = new File(buildDir, 'groovy/reports/acceptance')
}
dependencyManagement {
	imports {
		mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${springCloudServicesVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}